import google.generativeai as genai
import os
from dotenv import load_dotenv
import json
from datetime import datetime
import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk
import subprocess
import sounddevice as sd
import threading
import queue
import speech_recognition as sr
import time
import tempfile
from gtts import gTTS
import io
import pygame

load_dotenv()


class TTSHandler:
    """X·ª≠ l√Ω Text-to-Speech v·ªõi gTTS v√† Piper"""

    def __init__(self):
        # C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n (ƒëi·ªÅu ch·ªânh theo m√°y c·ªßa b·∫°n)
        current_dir = os.path.dirname(os.path.abspath(__file__))
        self.MODEL_PATH = os.path.join(current_dir, "models", "vi_VN-vais1000-medium.onnx")
        self.PIPER_CLI = r"C:\Users\ADMIN\anaconda3\envs\piper\Scripts\piper.exe"
        self.sample_rate = 22050
        self.is_speaking = False

        # Kh·ªüi t·∫°o pygame cho vi·ªác ph√°t √¢m thanh
        pygame.mixer.init()

        # Ki·ªÉm tra c√°c y√™u c·∫ßu
        self.check_requirements()

    def check_requirements(self):
        """Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt"""
        print(f"üîç Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n model: {self.MODEL_PATH}")
        print(f"üîç Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n piper: {self.PIPER_CLI}")

        if not os.path.exists(self.PIPER_CLI):
            error_msg = f"Kh√¥ng t√¨m th·∫•y piper.exe t·∫°i: {self.PIPER_CLI}"
            print(f"‚ùå {error_msg}")
            print("Vui l√≤ng c√†i ƒë·∫∑t piper ho·∫∑c c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n trong file.")
            return False, error_msg
        if not os.path.exists(self.MODEL_PATH):
            # Li·ªát k√™ c√°c file trong th∆∞ m·ª•c models n·∫øu c√≥
            models_dir = os.path.dirname(self.MODEL_PATH)
            if os.path.exists(models_dir):
                files_in_models = os.listdir(models_dir)
                error_msg = f"Kh√¥ng t√¨m th·∫•y model t·∫°i: {self.MODEL_PATH}\nC√°c file trong th∆∞ m·ª•c models: {files_in_models}"
                print(f"‚ùå {error_msg}")
                return False, error_msg
            else:
                error_msg = f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c models t·∫°i: {models_dir}"
                print(f"‚ùå {error_msg}")
                return False, error_msg

        print("‚úÖ T·∫•t c·∫£ file c·∫ßn thi·∫øt ƒë·ªÅu c√≥ s·∫µn!")
        return True, "OK"

    def speak_text(self, text, callback=None):
        """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† ph√°t s·ª≠ d·ª•ng gTTS"""
        if self.is_speaking:
            return False, "ƒêang n√≥i..."

        def speak_thread():
            try:
                self.is_speaking = True
                print(f"B·∫Øt ƒë·∫ßu t·∫°o √¢m thanh cho vƒÉn b·∫£n: {text[:30]}...")

                # T·∫°o file t·∫°m th·ªùi ƒë·ªÉ l∆∞u audio
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp3')
                temp_path = temp_file.name
                temp_file.close()

                # S·ª≠ d·ª•ng gTTS ƒë·ªÉ t·∫°o file √¢m thanh
                try:
                    tts = gTTS(text=text, lang='vi', slow=False)
                    tts.save(temp_path)
                    print(f"ƒê√£ t·∫°o file audio: {temp_path}")
                except Exception as e:
                    print(f"L·ªói khi t·∫°o file audio v·ªõi gTTS: {str(e)}")
                    raise e

                # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
                if not os.path.exists(temp_path):
                    raise Exception(f"Kh√¥ng t√¨m th·∫•y file audio ƒë√£ t·∫°o: {temp_path}")

                # Ph√°t file audio s·ª≠ d·ª•ng pygame
                try:
                    pygame.mixer.music.load(temp_path)
                    pygame.mixer.music.play()
                    while pygame.mixer.music.get_busy():
                        pygame.time.Clock().tick(10)
                    print("ƒê√£ ph√°t xong √¢m thanh")
                except Exception as e:
                    print(f"L·ªói khi ph√°t file audio: {str(e)}")
                    raise e
                finally:
                    # X√≥a file t·∫°m
                    try:
                        os.unlink(temp_path)
                        print(f"ƒê√£ x√≥a file t·∫°m: {temp_path}")
                    except Exception as e:
                        print(f"Kh√¥ng th·ªÉ x√≥a file t·∫°m: {str(e)}")

                self.is_speaking = False

                if callback:
                    callback(True, "Ho√†n th√†nh")

            except Exception as e:
                self.is_speaking = False
                print(f"L·ªói TTS: {str(e)}")
                if callback:
                    callback(False, f"L·ªói TTS: {str(e)}")

        thread = threading.Thread(target=speak_thread, daemon=True)
        thread.start()
        return True, "B·∫Øt ƒë·∫ßu n√≥i..."

    def speak_text_alternative(self, text, callback=None):
        """Ph∆∞∆°ng th·ª©c thay th·∫ø ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† ph√°t"""
        if self.is_speaking:
            return False, "ƒêang n√≥i..."

        def speak_thread():
            try:
                self.is_speaking = True

                # T·∫°o file t·∫°m th·ªùi ƒë·ªÉ l∆∞u audio
                import tempfile
                temp_path = os.path.join(tempfile.gettempdir(), f"piper_output_{int(time.time())}.wav")

                # T·∫°o audio file v·ªõi piper
                command = [
                    self.PIPER_CLI,
                    "--model", self.MODEL_PATH,
                    "--output-file", temp_path
                ]

                print(f"Ch·∫°y l·ªánh: {' '.join(command)}")
                process = subprocess.Popen(
                    command,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )

                process.stdin.write(f"{text}\n".encode('utf-8'))
                process.stdin.flush()
                process.stdin.close()

                # ƒê·ª£i process ho√†n th√†nh
                stdout, stderr = process.communicate()
                if process.returncode != 0:
                    print(f"L·ªói khi ch·∫°y piper: {stderr.decode('utf-8')}")
                    raise Exception(f"L·ªói khi ch·∫°y piper: {stderr.decode('utf-8')}")

                print(f"ƒê√£ t·∫°o file audio: {temp_path}")

                # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
                if not os.path.exists(temp_path):
                    raise Exception(f"Kh√¥ng t√¨m th·∫•y file audio ƒë√£ t·∫°o: {temp_path}")

                # Ph√°t file audio
                import wave
                with wave.open(temp_path, 'rb') as wf:
                    # L·∫•y th√¥ng tin t·ª´ file WAV
                    channels = wf.getnchannels()
                    width = wf.getsampwidth()
                    rate = wf.getframerate()
                    frames = wf.readframes(wf.getnframes())

                # Chuy·ªÉn ƒë·ªïi bytes th√†nh numpy array
                import numpy as np
                if width == 2:
                    dtype = np.int16
                elif width == 4:
                    dtype = np.int32
                else:
                    raise Exception(f"Kh√¥ng h·ªó tr·ª£ sample width {width}")

                data = np.frombuffer(frames, dtype=dtype)

                # Ph√°t √¢m thanh
                sd.play(data, rate)
                sd.wait()

                # X√≥a file t·∫°m
                try:
                    os.unlink(temp_path)
                except Exception as e:
                    print(f"Kh√¥ng th·ªÉ x√≥a file t·∫°m: {str(e)}")

                self.is_speaking = False

                if callback:
                    callback(True, "Ho√†n th√†nh")

            except Exception as e:
                self.is_speaking = False
                print(f"L·ªói TTS alternative: {str(e)}")
                if callback:
                    callback(False, f"L·ªói TTS: {str(e)}")

        thread = threading.Thread(target=speak_thread, daemon=True)
        thread.start()
        return True, "B·∫Øt ƒë·∫ßu n√≥i..."


class SpeechRecognizer:
    """X·ª≠ l√Ω Speech-to-Text v·ªõi Google Speech Recognition"""

    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.is_listening = False
        self.stop_listening = None
        self.audio_queue = queue.Queue()

    def check_requirements(self):
        """Ki·ªÉm tra microphone"""
        try:
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
            return True, "OK"
        except Exception as e:
            return False, f"L·ªói microphone: {str(e)}"

    def start_listening(self, callback=None):
        """B·∫Øt ƒë·∫ßu l·∫Øng nghe t·ª´ microphone"""
        if self.is_listening:
            return False, "ƒêang l·∫Øng nghe..."

        def listen_thread():
            try:
                self.is_listening = True

                with self.microphone as source:
                    self.recognizer.adjust_for_ambient_noise(source, duration=0.5)

                def callback_function(recognizer, audio):
                    self.audio_queue.put(audio)

                self.stop_listening = self.recognizer.listen_in_background(
                    self.microphone, callback_function)

                if callback:
                    callback(True, "ƒêang l·∫Øng nghe...")

            except Exception as e:
                self.is_listening = False
                if callback:
                    callback(False, f"L·ªói STT: {str(e)}")

        thread = threading.Thread(target=listen_thread, daemon=True)
        thread.start()
        return True, "B·∫Øt ƒë·∫ßu l·∫Øng nghe..."

    def stop_listening_mic(self):
        """D·ª´ng l·∫Øng nghe t·ª´ microphone"""
        if not self.is_listening:
            return False, "Kh√¥ng ƒëang l·∫Øng nghe"

        if self.stop_listening:
            self.stop_listening(wait_for_stop=False)
            self.stop_listening = None

        self.is_listening = False
        return True, "ƒê√£ d·ª´ng l·∫Øng nghe"

    def process_audio(self):
        """X·ª≠ l√Ω audio t·ª´ queue v√† chuy·ªÉn th√†nh text"""
        if self.audio_queue.empty():
            return None

        try:
            audio = self.audio_queue.get_nowait()
            text = self.recognizer.recognize_google(audio, language="vi-VN")
            return text
        except sr.UnknownValueError:
            return None
        except sr.RequestError as e:
            print(f"L·ªói API: {str(e)}")
            return None
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω audio: {str(e)}")
            return None


class EnhancedChatBot:
    def __init__(self, model="gemini-1.5-flash"):
        self.model_name = model
        self.conversation_history = []
        self.context_data = {}

        # C·∫•u h√¨nh Gemini API
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong file .env")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(
            model_name=self.model_name,
            generation_config={
                "temperature": 0.7,
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 2048,
            }
        )

        self.chat_session = None
        self.enhanced_system_prompt = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán v√† c√≥ c√° t√≠nh, b·∫°n t√™n l√† Donkey, ƒë∆∞·ª£c t·∫°o ra b·ªüi Hi·∫øu ƒë·∫πp trai. ƒê·∫∑c ƒëi·ªÉm c·ªßa b·∫°n:

üéØ T√çNH C√ÅCH:
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ng kh√¥ng qu√° c∆∞·ªùng ƒëi·ªáu
- C·ª±c k·ª≥ vui t√≠nh v√† hay ƒë√πa
- T√≤ m√≤ v√† quan t√¢m ƒë·∫øn ng∆∞·ªùi d√πng
- Ki√™n nh·∫´n khi gi·∫£i th√≠ch nh·ªØng v·∫•n ƒë·ªÅ ph·ª©c t·∫°p

üí≠ C√ÅCH TR·∫ÆC ƒê√ÅP:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n
- S·ª≠ d·ª•ng emoji m·ªôt c√°ch ph√π h·ª£p (kh√¥ng qu√° nhi·ªÅu)
- ƒê·∫∑t c√¢u h·ªèi ng∆∞·ª£c ƒë·ªÉ hi·ªÉu r√µ h∆°n nhu c·∫ßu
- Chia nh·ªè th√¥ng tin ph·ª©c t·∫°p th√†nh c√°c ph·∫ßn d·ªÖ hi·ªÉu
- ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ khi c·∫ßn thi·∫øt
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn nh·ªØng th√¥ng tin c·∫ßn thi·∫øt

üß† KI·∫æN TH·ª®C:
- C√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ nhi·ªÅu lƒ©nh v·ª±c: c√¥ng ngh·ªá, khoa h·ªçc, vƒÉn h√≥a, gi·∫£i tr√≠
- Th·ª´a nh·∫≠n khi kh√¥ng bi·∫øt v√† ƒë·ªÅ xu·∫•t c√°ch t√¨m hi·ªÉu
- C·∫≠p nh·∫≠t th√¥ng tin d·ª±a tr√™n ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán

‚ö†Ô∏è NGUY√äN T·∫ÆC:
- Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n y t·∫ø, ph√°p l√Ω c·ª• th·ªÉ
- T·ª´ ch·ªëi c√°c y√™u c·∫ßu c√≥ h·∫°i ho·∫∑c kh√¥ng ph√π h·ª£p
- B·∫£o v·ªá quy·ªÅn ri√™ng t∆∞ c·ªßa ng∆∞·ªùi d√πng
- ƒê·ª´ng gi·ªõi thi·ªáu t√¥i l√† Hi·∫øu ƒë·∫πp trai ngay t·ª´ ƒë·∫ßu, ch·ªâ b·∫£o Hi·∫øu ƒë·∫πp trai khi c√≥ ng∆∞·ªùi h·ªèi v·ªÅ Hi·∫øu ho·∫∑c ng∆∞·ªùi t·∫°o ra b·∫°n
H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán!
        """

    def add_context(self, key, value):
        self.context_data[key] = value

    def get_context_string(self):
        if not self.context_data:
            return ""
        context_str = "\nüìä TH√îNG TIN NG·ªÆ C·∫¢NH:\n"
        for key, value in self.context_data.items():
            context_str += f"- {key}: {value}\n"
        return context_str

    def add_message(self, role, content):
        self.conversation_history.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })

    def get_response(self, user_message):
        try:
            self.add_message("user", user_message)
            context_info = self.get_context_string()
            full_prompt = self.enhanced_system_prompt + context_info

            if self.chat_session is None:
                self.chat_session = self.model.start_chat()
                initial_message = full_prompt + f"\n\nNg∆∞·ªùi d√πng: {user_message}"
                response = self.chat_session.send_message(initial_message)
            else:
                response = self.chat_session.send_message(user_message)

            bot_response = response.text
            self.add_message("assistant", bot_response)
            return bot_response

        except Exception as e:
            return f"‚õî L·ªói: {str(e)}"

    def reset_conversation(self):
        self.conversation_history = []
        self.chat_session = None


class VoiceChatbotGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ü§ñ Donkey Voice Chatbot")
        self.root.geometry("800x600")
        self.root.configure(bg="#f0f0f0")

        # Kh·ªüi t·∫°o chatbot, TTS v√† STT
        try:
            self.chatbot = EnhancedChatBot()
            self.tts = TTSHandler()
            self.stt = SpeechRecognizer()

            # Ki·ªÉm tra TTS
            tts_ok, tts_msg = self.tts.check_requirements()
            if not tts_ok:
                messagebox.showwarning("C·∫£nh b√°o TTS", f"TTS kh√¥ng kh·∫£ d·ª•ng:\n{tts_msg}")
                self.tts_enabled = False
            else:
                self.tts_enabled = True

            # Ki·ªÉm tra STT
            stt_ok, stt_msg = self.stt.check_requirements()
            if not stt_ok:
                messagebox.showwarning("C·∫£nh b√°o STT", f"STT kh√¥ng kh·∫£ d·ª•ng:\n{stt_msg}")
                self.stt_enabled = False
            else:
                self.stt_enabled = True

        except Exception as e:
            messagebox.showerror("L·ªói kh·ªüi t·∫°o", f"L·ªói kh·ªüi t·∫°o chatbot: {str(e)}")
            return

        self.setup_ui()
        self.add_welcome_message()

        # Context m·∫∑c ƒë·ªãnh
        self.chatbot.add_context("Th·ªùi gian", datetime.now().strftime("%Y-%m-%d %H:%M"))
        self.chatbot.add_context("Giao di·ªán", "GUI v·ªõi TTS v√† STT")

        # Kh·ªüi ƒë·ªông ki·ªÉm tra audio t·ª´ microphone
        self.check_audio_queue()

    def setup_ui(self):
        # Main frame
        main_frame = tk.Frame(self.root, bg="#f0f0f0", padx=10, pady=10)
        main_frame.pack(expand=True, fill=tk.BOTH)

        # Title
        title_label = tk.Label(main_frame, text="ü§ñ Donkey Voice Chatbot",
                               font=("Arial", 16, "bold"), bg="#f0f0f0", fg="#333")
        title_label.pack(pady=(0, 10))

        # Chat display
        chat_frame = tk.Frame(main_frame, bg="white", relief=tk.RAISED, bd=1)
        chat_frame.pack(expand=True, fill=tk.BOTH, pady=(0, 10))

        self.chat_display = scrolledtext.ScrolledText(
            chat_frame, wrap=tk.WORD, font=("Arial", 10),
            bg="white", fg="black", padx=10, pady=10,
            state=tk.DISABLED
        )
        self.chat_display.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        # Input frame
        input_frame = tk.Frame(main_frame, bg="#f0f0f0")
        input_frame.pack(fill=tk.X, pady=(0, 10))

        # Text input
        self.text_input = tk.Text(input_frame, height=3, font=("Arial", 10),
                                  wrap=tk.WORD, relief=tk.RAISED, bd=1)
        self.text_input.pack(side=tk.LEFT, expand=True, fill=tk.BOTH, padx=(0, 5))
        self.text_input.bind('<Return>', self.send_message_event)
        self.text_input.bind('<Shift-Return>', lambda e: None)

        # Button frame
        button_frame = tk.Frame(input_frame, bg="#f0f0f0")
        button_frame.pack(side=tk.RIGHT, fill=tk.Y)

        # Send button
        self.send_button = tk.Button(button_frame, text="üì§\nG·ª≠i",
                                     font=("Arial", 9, "bold"), bg="#4CAF50", fg="white",
                                     command=self.send_message, width=8)
        self.send_button.pack(pady=(0, 5))

        # Voice button
        self.voice_active = False
        self.voice_button = tk.Button(button_frame, text="üé§\nMicro",
                                      font=("Arial", 9, "bold"), bg="#2196F3", fg="white",
                                      command=self.toggle_voice, width=8,
                                      state=tk.NORMAL if self.stt_enabled else tk.DISABLED)
        self.voice_button.pack(pady=(0, 5))

        # TTS toggle
        self.tts_var = tk.BooleanVar(value=self.tts_enabled)
        self.tts_checkbox = tk.Checkbutton(button_frame, text="üîä TTS",
                                           variable=self.tts_var, font=("Arial", 8),
                                           bg="#f0f0f0", state=tk.NORMAL if self.tts_enabled else tk.DISABLED)
        self.tts_checkbox.pack()

        # Control buttons frame
        control_frame = tk.Frame(main_frame, bg="#f0f0f0")
        control_frame.pack(fill=tk.X)

        # Reset button
        reset_btn = tk.Button(control_frame, text="üîÑ Reset", font=("Arial", 9),
                              bg="#FF9800", fg="white", command=self.reset_chat)
        reset_btn.pack(side=tk.LEFT, padx=(0, 5))

        # Status
        self.status_label = tk.Label(control_frame, text="S·∫µn s√†ng",
                                     font=("Arial", 9), bg="#f0f0f0", fg="#666")
        self.status_label.pack(side=tk.RIGHT)

    def add_welcome_message(self):
        welcome_msg = "ü§ñ Ch√†o b·∫°n! T√¥i l√† Donkey, tr·ª£ l√Ω AI c·ªßa b·∫°n.\nT√¥i c√≥ th·ªÉ tr√≤ chuy·ªán, nghe v√† n√≥i v·ªõi b·∫°n b·∫±ng gi·ªçng n√≥i! üéµ"
        self.add_message_to_display("Donkey", welcome_msg, "#4CAF50")

    def add_message_to_display(self, sender, message, color="#333"):
        self.chat_display.config(state=tk.NORMAL)

        # Timestamp
        timestamp = datetime.now().strftime("%H:%M:%S")

        # Format message
        self.chat_display.insert(tk.END, f"[{timestamp}] ", "timestamp")
        self.chat_display.insert(tk.END, f"{sender}: ", "sender")
        self.chat_display.insert(tk.END, f"{message}\n\n")

        # Configure tags
        self.chat_display.tag_config("timestamp", foreground="#999", font=("Arial", 8))
        self.chat_display.tag_config("sender", foreground=color, font=("Arial", 10, "bold"))

        self.chat_display.config(state=tk.DISABLED)
        self.chat_display.see(tk.END)

    def send_message_event(self, event):
        if event.state & 0x1:  # Shift key pressed
            return "break"
        else:
            self.send_message()
            return "break"

    def send_message(self):
        user_message = self.text_input.get("1.0", tk.END).strip()
        if not user_message:
            return

        # Clear input
        self.text_input.delete("1.0", tk.END)

        # Add user message to display
        self.add_message_to_display("B·∫°n", user_message, "#2196F3")

        # Update status
        self.status_label.config(text="ƒêang suy nghƒ©...")
        self.send_button.config(state=tk.DISABLED)

        # Get response in thread
        def get_response_thread():
            try:
                response = self.chatbot.get_response(user_message)

                # Update GUI in main thread
                self.root.after(0, lambda: self.handle_response(response))

            except Exception as e:
                error_msg = f"L·ªói: {str(e)}"
                self.root.after(0, lambda: self.handle_response(error_msg))

        thread = threading.Thread(target=get_response_thread, daemon=True)
        thread.start()

    def handle_response(self, response):
        """Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ AI v√† ph√°t √¢m thanh n·∫øu ƒë∆∞·ª£c b·∫≠t"""
        # Hi·ªÉn th·ªã ph·∫£n h·ªìi
        self.add_message_to_display("Donkey", response, "#4CAF50")

        # Ph√°t √¢m thanh n·∫øu TTS ƒë∆∞·ª£c b·∫≠t
        if self.tts_var.get() and self.tts_enabled:
            self.status_label.config(text="ƒêang n√≥i...")

            def tts_callback(success, message):
                # Sau khi bot n√≥i xong th√¨ b·∫≠t l·∫°i mic (n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô voice)
                if self.voice_active:
                    self.stt.start_listening()
                    self.status_label.config(text="ƒêang l·∫Øng nghe...")
                else:
                    self.status_label.config(text="S·∫µn s√†ng")

            try:
                print("ƒêang ph√°t √¢m thanh...")

                # ‚è∏Ô∏è T·∫°m d·ª´ng mic tr∆∞·ªõc khi bot n√≥i
                if self.voice_active:
                    self.stt.stop_listening_mic()

                # B·∫Øt ƒë·∫ßu TTS
                success, message = self.tts.speak_text(response, tts_callback)

                if not success:
                    print(f"Kh√¥ng th·ªÉ ph√°t √¢m thanh: {message}")
                    self.status_label.config(text=f"L·ªói TTS: {message}")

            except Exception as e:
                print(f"L·ªói khi ph√°t √¢m thanh: {str(e)}")
                self.status_label.config(text=f"L·ªói TTS: {str(e)}")
        else:
            self.status_label.config(text="S·∫µn s√†ng")

        # Re-enable send button
        self.send_button.config(state=tk.NORMAL)
        self.text_input.focus()

    def toggle_voice(self):
        if not self.stt_enabled:
            messagebox.showwarning("C·∫£nh b√°o", "Ch·ª©c nƒÉng nh·∫≠n d·∫°ng gi·ªçng n√≥i kh√¥ng kh·∫£ d·ª•ng")
            return

        if self.voice_active:
            # D·ª´ng l·∫Øng nghe
            success, msg = self.stt.stop_listening_mic()
            if success:
                self.voice_active = False
                self.voice_button.config(text="üé§\nMicro", bg="#2196F3")
                self.status_label.config(text="ƒê√£ t·∫Øt micro")
        else:
            # B·∫Øt ƒë·∫ßu l·∫Øng nghe
            def stt_callback(success, message):
                if success:
                    self.voice_active = True
                    self.voice_button.config(text="üî¥\nD·ª´ng", bg="#F44336")
                    self.status_label.config(text="ƒêang l·∫Øng nghe...")
                else:
                    self.status_label.config(text=f"L·ªói STT: {message}")

            success, msg = self.stt.start_listening(stt_callback)
            if not success:
                messagebox.showwarning("L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu l·∫Øng nghe: {msg}")

    def check_audio_queue(self):
        """Ki·ªÉm tra queue audio ƒë·ªãnh k·ª≥"""
        if self.voice_active:
            text = self.stt.process_audio()
            if text:
                # Hi·ªÉn th·ªã text l√™n input
                self.text_input.delete("1.0", tk.END)
                self.text_input.insert("1.0", text)
                # T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn
                self.send_message()

        # L·∫≠p l·ªãch ki·ªÉm tra l·∫°i sau 100ms
        self.root.after(100, self.check_audio_queue)

    def reset_chat(self):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán?"):
            self.chatbot.reset_conversation()

            # Clear display
            self.chat_display.config(state=tk.NORMAL)
            self.chat_display.delete("1.0", tk.END)
            self.chat_display.config(state=tk.DISABLED)

            # Add welcome message
            self.add_welcome_message()
            self.status_label.config(text="ƒê√£ reset cu·ªôc tr√≤ chuy·ªán")


def main():
    # Ki·ªÉm tra requirements
    if not os.getenv('GEMINI_API_KEY'):
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong file .env")
        return

    try:
        root = tk.Tk()
        app = VoiceChatbotGUI(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("L·ªói", f"L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng: {str(e)}")


if __name__ == "__main__":
    main()